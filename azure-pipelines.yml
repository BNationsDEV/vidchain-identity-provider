# Deploy to Azure Kubernetes Service
# Build and push image to Azure Container Registry; Deploy to Azure Kubernetes Service
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
- kubernetes-deployment

resources:
- repo: self

variables:
  major: 0
  minor: 1
  # Image repository
  Repo: 'identity-consent-api'
  RepoEndpoint: 'k8scrvidchaindev.azurecr.io/identity-consent-api'

  # Dockerfile
  Dockerfile: 'packages/identity-consent/Dockerfile'

  # Deployment YAML
  # Only used when the deployment is already available in the cluster
  deployment: deployment/identity-consent-api-deployment
  
  # Otherwise Kubernetes YAML...
  # Used to create a new deployment (check commented code below)
  #k8s: 'packages/identity-consent/k8s.yml'

  # Kubernetes namespace
  namespace: 'development'

  # Image tagging: application version - build
  tag: $(major).$(minor).$(Build.BuildNumber)-$(Build.SourceBranchName)
  # Agent VM image name
  vmImageName: 'ubuntu-latest'

name: $(major).$(minor)$(Rev:.r)-$(Build.SourceBranchName)

stages:
- stage: Build
  displayName: 'Build stage'
  jobs:  
  - job: BuildIdentityConsent
    displayName: 'Build identity-consent'
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: Docker@2
      displayName: Build and push identity-consent image to container registry
      inputs:
        command: buildAndPush
        repository: $(Repo)
        dockerfile: $(Dockerfile)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)
- stage: Deploy
  displayName: 'Deploy stage'
  dependsOn: Build
  jobs:
  - deployment: Deploy
    displayName: 'Deploy identity-consent'
    pool:
      vmImage: $(vmImageName)
    environment: 'development'
    strategy:
      runOnce:
        deploy:
          steps:
          - checkout: self
          ## Since the deployment is already available in the cluster
          - task: Kubernetes@1
            displayName: kubectl set image for identity-consent
            inputs:
              connectionType: Azure Resource Manager
              azureSubscriptionEndpoint: $(azureSubscriptionEndpoint) 
              azureResourceGroup: $(azureResourceGroup)
              kubernetesCluster: $(kubernetesCluster)
              command: set
              arguments: image $(deployment) $(Repo)=$(RepoEndpoint):$(tag) -n $(namespace)
          ## Otherwise, use code below to create a new deployment 
          #- task: Kubernetes@1
          #  displayName: kubectl apply for identity-consent
          #  inputs:
          #    connectionType: Azure Resource Manager
          #    azureSubscriptionEndpoint: $(azureSubscriptionEndpoint) 
          #    azureResourceGroup: $(azureResourceGroup)
          #    kubernetesCluster: $(kubernetesCluster)
          #    command: apply
          #    arguments: -f $(System.DefaultWorkingDirectory)/$(k8s) -n $(namespace)
          