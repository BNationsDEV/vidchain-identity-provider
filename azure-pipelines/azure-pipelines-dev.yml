trigger:
  branches:
    include:
      - development
  paths:
    include:
      - packages/identity-consent

pr: none

resources:
- repo: self

variables:
  # Docker Buildkit improves image build performance
  DOCKER_BUILDKIT: 1
  # Image repository
  Repo: 'identity-consent-api'
  RepoEndpoint: 'k8scrvidchaindev.azurecr.io/identity-consent-api'
  # Dockerfile
  Dockerfile: 'packages/identity-consent/Dockerfile'
  # Kubernetes YAML
  k8s: 'packages/identity-consent/k8s/k8s-dev.yml'
  # Configmaps
  configMap: 'packages/identity-consent/k8s/configmap-dev.yml'
  #Â package.json
  packageJson: 'packages/identity-consent/package.json'
  # Kubernetes namespace
  namespace: 'development'
  # Image tagging: application version - build
  tag: $(Build.BuildNumber)
  # Agent VM image name
  vmImageName: 'ubuntu-latest'


stages:
- stage: 'Build'
  jobs:
  - job: GetPackageVersion
    displayName: 'Retrieve package.json version to update build number'
    pool:
      vmImage: $(vmImageName)
    steps:
      - task: NodeTool@0
        inputs:
          versionSpec: '12.x'
        displayName: 'Use node'
      - script: |
          npmVersionString=$(node -p "require('./$(packageJson)').version")
          commit=$(Build.SourceVersion)
          shortCommit=${commit:0:7}
          echo "##vso[build.updatebuildnumber]$npmVersionString-commit.$shortCommit"
        displayName: 'retrieve $(packageJson) version'
  - job: Build       
    displayName: 'Build identity-consent'
    pool:
      vmImage: $(vmImageName)
    dependsOn: GetPackageVersion
    steps:
    - task: Docker@2
      displayName: Login ACR
      inputs:
        command: login
        containerRegistry: $(dockerRegistryServiceConnection)
    - script: "docker pull $(RepoEndpoint):latest"
      displayName: Pull latest for layer caching
      continueOnError: true
    - task: Docker@2
      displayName: "build --cache-from=$(RepoEndpoint):latest"
      inputs:
        containerRegistry: '$(dockerRegistryServiceConnection)'
        repository: '$(Repo)'
        command: 'build'
        Dockerfile: $(Dockerfile)
        arguments: '--cache-from=$(RepoEndpoint):latest' 
        tags: |
          $(tag)
          latest
    - task: Docker@2
      displayName: "push"
      inputs:
        command: push
        containerRegistry: "$(dockerRegistryServiceConnection)"
        repository: $(Repo) 
        tags: |
          $(tag)
          latest
- stage: Deploy
  displayName: 'Deploy stage'
  dependsOn: Build
  jobs:
  - deployment: Deploy
    displayName: 'Deploy identity-consent'
    pool:
      vmImage: $(vmImageName)
    environment: 'development'
    strategy:
      runOnce:
        deploy:
          steps:
          - checkout: self
            fetchDepth: 1
          - task: Kubernetes@1
            displayName: Create/update configmap
            inputs:
              connectionType: Azure Resource Manager
              azureSubscriptionEndpoint: $(azureSubscriptionEndpoint) 
              azureResourceGroup: $(azureResourceGroup)
              kubernetesCluster: $(kubernetesCluster)
              command: apply
              arguments: -f $(configMap) -n $(namespace)
          - task: KubernetesManifest@0
            displayName: Create/update deployment
            inputs:              
              kubernetesServiceConnection: $(kubernetesServiceConnection)
              namespace: $(namespace)
              manifests: $(k8s)
              containers: |
                $(RepoEndpoint):$(tag)   