<!doctype html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>VIDchain Login</title>
  <script src="https://cdn.jsdelivr.net/npm/vue/dist/vue.js"></script>
  <script src="/socket.io/socket.io.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/axios@0.12.0/dist/axios.min.js"></script>
</head>

<body>
  <div id="login-app" class="formLogin">
    <img id="logo" class ="logo" src="/static/logo__Vidchain.png"></img>
    <div  class="formSquare">
        <input type="hidden" id="csrf" name="_csrf" value={{csrfToken}}>
        <input type="hidden" name="challenge" value={{challenge}}>
        <button class="scanButton" v-on:click="sendSIOPClientUriBackend">Log in using VIDchain</button>
        <img id="qrImage" class="qrImage"></img>
        <br><br>
        <div class="remember">
          <input type="checkbox" id="remember" name="remember" v-bind:value="remember" value="1">
           <label for="remember">Remember me</label>
        </div>
    </div>
  </div>
  <script>
    const app = new Vue({
      el: '#login-app',
      data: {
        validationResult: '',
        socket: null,
        clientUriRedirect: '',
        remember: false
      },
      methods: {
        resetImg() {
          var img = document.getElementById('qrImage');
          img.src = '';
        },
        resetVars() {
          this.error = '';
          this.validationResult = '';
          this.resetImg();
        },
        sendSIOPClientUriBackend: function() {
          this.resetVars();
          let urlParams = new URLSearchParams(window.location.search);
          let login_challenge = urlParams.get('login_challenge');
          const data = {
            clientUriRedirect: this.clientUriRedirect,
            challenge: login_challenge
          };
          this.socket.emit('signIn', data);
          
        },
        receiveMessage(msg) {
          console.log(`recv: ${msg}`);
        },
        displayQr(qrResponse) {
          console.log(qrResponse);
          var img = document.getElementById('qrImage')
          img.src = qrResponse.imageQr
        },

        signInResponse(msg) {
          let urlParams = new URLSearchParams(window.location.search);
          let login_challenge = urlParams.get('login_challenge');
          console.log(`recv: ${msg}`);
          const response = JSON.parse(msg)
          this.resetImg();
          this.validationResult = `Your Sign-In validation result is: ${response.validationResult}`;
          //this.did = `Your DID is: ${response.did}`;
          if(response.validationResult){
            //Do Post to login
            const did = response.did 

            //const did = "did:ebsi:0x2c8181B9bF7F8f708A7C68DaE04d6d56A87dFBD3"
            const body = {
              challenge: login_challenge,
              remember: this.remember,
              did
            };
            axios.post('/login', body)
            .then ((res)=> window.location = res.data)
            .catch ((error)=> console.log(error))
          }
        },
      },
      created() {
        this.socket = io('/')
        this.socket.on('signIn', (msg) => {
          this.receiveMessage(msg);
        });
        this.socket.on('printQR', (qrResponse) => {
          console.log("pin");
          this.displayQr(qrResponse);
        });
        this.socket.on('signInResponse', (msg) => {
          this.signInResponse(msg);
        });
      },
    });

  </script>

  <style scoped>
    .formSquare {
        background-color: #00bf71;
        border-radius: 20px;
        color: #ffff;
        width: 45%;
        height: 70%;
        align-self: center;
        display: flex;
        flex-direction: column;
        align-items: flex-start;
    }
    .formLogin {
      display: flex;
      flex-direction: column;
      align-items: flex-start;
      background: #ffff;
      padding: 1rem 1.25rem;
      color: #00bf71;
      position: absolute;
      width: 100%;
      height: 100%;
      margin-left: -10px;
      margin-top: -10px;
    }
    .logo{
      width: 20%;
      height: 25%;
      align-self: center;
    }
    .scanButton {
      display: block;
      cursor: pointer;
      outline: none;
      border: none;
      background-color: #ffff;
      width: 50%;
      height: auto;
      padding: 2%;
      border-radius: 30px;
      font-size: 1.5rem;
      font-weight: 600;
      color:  #00bf71;
      background-size: 100% 100%;
      box-shadow: 0 0 0 7px var(--light) inset;
      align-self: center;
      margin-top: 5%;
      
    }
    .qrImage{
      width: 55%;
      height: auto;
      align-self: center;
      margin-top: 5%;
    }
    .remember{
      align-self: center;
      justify-content: end;
    }
    .back {
      background-color: #00bf71;
    }
    .remember{
      margin-top: 55%;
    }
  </style>
</body>

</html>