<!doctype html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>VIDchain Login</title>
  <link rel="apple-touch-icon" href="/static/icon.png" />
  <link rel="icon" href="/static/icon.png" />
  <script src="https://cdn.jsdelivr.net/npm/vue/dist/vue.js"></script>
  <script src="/socket.io/socket.io.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/axios@0.12.0/dist/axios.min.js"></script>
</head>

<body>
  <div id="login-app" class="formLogin">
    <input type="hidden" id="csrf" name="_csrf" value={{csrfToken}}>
    <input type="hidden" name="challenge" value={{challenge}}>
    <input type="hidden" id="client_name" name="client_name" value={{client_name}}>
    <input type="hidden" id="scope" name="scope" value={{scope}}>
    <img id="logo" class="logo" src="/static/validated_white.png"></img>
    <h1 class="subtitle">Authenticate with your VIDchain wallet</h1>
    <h4 class="subtitle">Go to login in your VIDchain mobile app and scan the QR code.</h4>
    <img id="qrImage" class="qrImage"></img>
    {{!-- <button class="scanButton" v-on:click="sendSIOPClientUriBackend">Continue using Vidchain</button> --}}
    {{!-- <div class="remember">
      <input type="checkbox" id="remember" name="remember" v-bind:value="remember" value="1">
      <label for="remember"><b>Remember me</b></label>
    </div> --}}
  </div>
  <script>
    const app = new Vue({
      el: '#login-app',
      data: {
        validationResult: '',
        socket: null,
        clientUriRedirect: '',
        remember: false
      },
      methods: {
        resetImg() {
          var img = document.getElementById('qrImage');
          img.src = '';
        },
        resetVars() {
          this.error = '';
          this.validationResult = '';
          this.resetImg();
        },

        displayQr(qrResponse) {
          const inMobileOrTablet = this.isMobileOrTablet();
          if (inMobileOrTablet) {
            let urlParams = new URLSearchParams(window.location.search);
            let login_challenge = urlParams.get('login_challenge');
            window.open(qrResponse.siopUri + "&login_challenge=" + login_challenge, "_self");
          }
          else {
            var img = document.getElementById('qrImage')
            img.src = qrResponse.imageQr
          }
        },

        signInResponse(msg) {
          let urlParams = new URLSearchParams(window.location.search);
          let login_challenge = urlParams.get('login_challenge');
          const response = JSON.parse(msg)
          this.resetImg();
          this.validationResult = `Your Sign-In validation result is: ${response.validationResult}`;
          if (response.validationResult) {
            //Do Post to login
            const did = response.did
            const jwt = response.jwt

            const body = {
              challenge: login_challenge,
              remember: this.remember,
              did,
              jwt
            };
            axios.post('/login', body)
              .then((res) => window.location = res.data)
              .catch((error) => console.log(error))
          }
        },
        isMobileOrTablet() {
          if (/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)) {
            return true
          } else {
            return false
          }
        }
      },
      created() {
        this.socket = io('/', {
          transports: ["websocket"],
        });
        //Skip the click button functionality (do the request when opens)
        let urlParams = new URLSearchParams(window.location.search);
        let login_challenge = urlParams.get('login_challenge');
        const data = {
          clientUriRedirect: this.clientUriRedirect,
          challenge: login_challenge,
          client_name: decodeURIComponent(document.getElementById('client_name').value),
          scope: decodeURIComponent(document.getElementById('scope').value),
          isMobile: this.isMobileOrTablet()
        };
        this.socket.emit('signIn', data);

        this.socket.on('printQR', (qrResponse) => {
          this.displayQr(qrResponse);
        });
        this.socket.on('signInResponse', (msg) => {
          this.signInResponse(msg);
        });
      },
    });

  </script>

  <style scoped>
    .subtitle {
      align-self: center;
      color: white;
    }

    .formLogin {
      display: flex;
      flex-direction: column;
      align-items: flex-start;
      background: rgba(21, 26, 53, 1);
      padding: 1rem 1.25rem;
      margin: 0;
      height: 100%;
    }

    .logo {
      max-width: 300px;
      margin: 1%;
      align-self: center;
    }

    .scanButton {
      display: block;
      cursor: pointer;
      outline: none;
      border: none;
      background-color: white;
      height: auto;
      padding: 2%;
      border-radius: 20px;
      font-size: 1.5rem;
      font-weight: 600;
      color: rgba(21, 26, 53, 1);
      background-size: 100% 100%;
      box-shadow: 0 0 0 7px var(--light) inset;
      align-self: center;
      margin-top: 5%;
    }

    .qrImage {
      max-width: 300px;
      align-self: center;
    }

    .remember {
      align-self: center;
      margin-top: 2%;
      color: white;
    }
  </style>
</body>

</html>